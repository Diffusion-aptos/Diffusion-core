import Decimal from 'decimal.js';
import { SDK } from '../sdk';
import { IModule } from '../interfaces/IModule';
import { AptosPoolResource, AptosResourceType, CurveType, TAptosTxPayload } from '../types/aptos';
import { VERSION_0, VERSION_0_5 } from "../constants";
export declare type CalculateRatesParams = {
    fromToken: AptosResourceType;
    toToken: AptosResourceType;
    amount: Decimal | number;
    interactiveToken: 'from' | 'to';
    curveType: CurveType;
    version?: typeof VERSION_0 | typeof VERSION_0_5;
    additionalFee?: number;
};
export declare type CreateTXPayloadParams = {
    fromToken: AptosResourceType;
    toToken: AptosResourceType;
    fromAmount: Decimal | number;
    toAmount: Decimal | number;
    interactiveToken: 'from' | 'to';
    slippage: number;
    stableSwapType: 'high' | 'normal';
    curveType: CurveType;
    version?: typeof VERSION_0 | typeof VERSION_0_5;
};
declare type GetLiquidityPoolResourceParams = Pick<CalculateRatesParams, 'fromToken' | 'toToken' | 'curveType' | 'version'>;
export declare class SwapModule implements IModule {
    protected _sdk: SDK;
    get sdk(): SDK;
    constructor(sdk: SDK);
    getAmountIn(params: Omit<CalculateRatesParams, 'interactiveToken'>): Promise<string>;
    getAmountOut(params: Omit<CalculateRatesParams, 'interactiveToken'>): Promise<string>;
    calculateRates(params: CalculateRatesParams): Promise<string>;
    createSwapTransactionPayload(params: CreateTXPayloadParams): TAptosTxPayload;
    getLiquidityPoolResource(params: GetLiquidityPoolResourceParams): Promise<{
        liquidityPoolType: string;
        liquidityPoolResource: import("../types/aptos").AptosResource<AptosPoolResource> | undefined;
    }>;
}
export {};

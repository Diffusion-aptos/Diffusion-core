import Decimal from 'decimal.js';
import { IModule } from '../interfaces/IModule';
import { SDK } from '../sdk';
import { AptosCoinInfoResource, AptosResource, AptosResourceType, CurveType, AptosPoolResource, TxPayloadCallFunction } from '../types/aptos';
import { CreateTXPayloadParams } from './SwapModule';
import { VERSION_0, VERSION_0_5 } from "../constants";
interface ICreateBurnLiquidityPayload {
    fromToken: AptosResourceType;
    toToken: AptosResourceType;
    burnAmount: Decimal | number;
    slippage: number;
    curveType: CurveType;
    version?: typeof VERSION_0 | typeof VERSION_0_5;
}
interface ICalculateRatesParams {
    fromToken: AptosResourceType;
    toToken: AptosResourceType;
    amount: Decimal | number;
    interactiveToken: 'from' | 'to';
    curveType: CurveType;
    slippage: number;
    version?: typeof VERSION_0 | typeof VERSION_0_5;
}
interface ICalculateSupplyParams extends Pick<ICalculateRatesParams, 'slippage' | 'version'> {
    toAmount: Decimal | number;
    fromAmount: Decimal | number;
    toReserve: Decimal | number;
    fromReserve: Decimal | number;
    isSorted: boolean;
    lpSupply?: number;
}
interface ICalculateBurnLiquidityParams {
    fromToken: string;
    toToken: string;
    slippage: number;
    burnAmount: Decimal | number;
    curveType: CurveType;
    version?: typeof VERSION_0 | typeof VERSION_0_5;
}
declare type TGetResourcesPayload = Omit<ICalculateRatesParams, 'amount' | 'slippage' | 'interactiveToken'>;
declare type TCreateLiquidityPoolTXPayloadParams = Omit<CreateTXPayloadParams, 'stableSwapType'>;
export declare class LiquidityModule implements IModule {
    protected _sdk: SDK;
    get sdk(): SDK;
    constructor(sdk: SDK);
    checkPoolExistence(params: TGetResourcesPayload): Promise<boolean>;
    getLiquidityPoolResource(params: TGetResourcesPayload): Promise<{
        liquidityPoolResource: AptosResource<AptosPoolResource> | undefined;
    }>;
    getLiquiditySupplyResource(params: TGetResourcesPayload): Promise<{
        liquidityPoolResource: AptosResource<AptosCoinInfoResource> | undefined;
    }>;
    calculateSupply(params: ICalculateSupplyParams): string;
    getAmountIn(params: Omit<ICalculateRatesParams, 'interactiveToken'>): Promise<string>;
    getAmountOut(params: Omit<ICalculateRatesParams, 'interactiveToken'>): Promise<string>;
    calculateRateAndMinReceivedLP(params: ICalculateRatesParams): Promise<{
        rate: string;
        receiveLp: string;
    }>;
    createAddLiquidityPayload(params: TCreateLiquidityPoolTXPayloadParams): Promise<TxPayloadCallFunction>;
    createBurnLiquidityPayload(params: ICreateBurnLiquidityPayload): Promise<{
        type: string;
        function: string;
        type_arguments: string[];
        arguments: string[];
    }>;
    calculateOutputBurn(params: ICalculateBurnLiquidityParams): Promise<{
        x: string;
        y: string;
        withoutSlippage: {
            x: string;
            y: string;
        };
    } | undefined>;
}
export {};

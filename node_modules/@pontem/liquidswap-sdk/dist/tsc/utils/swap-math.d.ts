import Decimal from 'decimal.js';
/**
 * Calculates rate with uncorrelated curve for 'to' input  based on 'from' input
 *
 * @param {Decimal} coinInVal - amount of first('from') token
 * @param {Decimal} reserveInSize - amount of reserves for first('from') token
 * @param {Decimal} reserveOutSize - amount of reserves for second('to') token
 * @param {Decimal} fee - amount of fee
 */
export declare function getCoinOutWithFees(coinInVal: Decimal, reserveInSize: Decimal, reserveOutSize: Decimal, fee: Decimal): Decimal;
/**
 * Calculates rate with uncorrelated curve for 'from' input based on 'to' input
 *
 * @param {Decimal} coinOutVal - amount of second('to') token
 * @param {Decimal} reserveOutSize - amount of reserves for second('to') token
 * @param {Decimal} reserveInSize - amount of reserves for first('from') token
 * @param {Decimal} fee - amount of fee
 */
export declare function getCoinInWithFees(coinOutVal: Decimal, reserveOutSize: Decimal, reserveInSize: Decimal, fee: Decimal): Decimal;
/**
 * Calculates rate with stable curve for 'from' input based on 'to' input
 *
 * @param {Decimal} coinOut - amount of second('to') token
 * @param {Decimal} reserveOut - amount of reserves for second('to') token
 * @param {Decimal} reserveIn - amount of reserves for first('from') token
 * @param {Decimal} scaleOut - precision for the ('to')token in decimal places
 * @param {Decimal} scaleIn - precision for the ('from')token in decimal places
 * @param {Decimal} fee - amount of fee
 */
export declare function getCoinsInWithFeesStable(coinOut: Decimal, reserveOut: Decimal, reserveIn: Decimal, scaleOut: Decimal, scaleIn: Decimal, fee: Decimal): Decimal;
/**
 * Calculates coin_in value based on first coin value, scales and reserves
 *
 * @param {Decimal} coinOut - decimal amount of second('to') token
 * @param {Decimal} scaleOut - decimal precision for the ('to')token in decimal places
 * @param {Decimal} scaleIn - decimal precision for the ('from')token in decimal places
 * @param {Decimal} reserveOut - decimal amount of reserves for second('to') token
 * @param {Decimal} reserveIn - decimal amount of reserves for first('from') token
 */
export declare function coin_in(coinOut: Decimal, scaleOut: Decimal, scaleIn: Decimal, reserveOut: Decimal, reserveIn: Decimal): Decimal;
/**
 * Calculates rate with stable curve for 'from' input based on 'to' input
 *
 * @param {Decimal} coinIn - amount of first('from') token
 * @param {Decimal} reserveIn - amount of reserves for first ('from') token
 * @param {Decimal} reserveOut - amount of reserves for second ('to') token
 * @param {Decimal} scaleIn - precision for the ('from') token in decimal places
 * @param {Decimal} scaleOut - precision for the ('to') token in decimal places
 * @param {Decimal} fee - amount of fee
 */
export declare function getCoinsOutWithFeesStable(coinIn: Decimal, reserveIn: Decimal, reserveOut: Decimal, scaleIn: Decimal, scaleOut: Decimal, fee: Decimal): Decimal;
/**
 * Calculates coin_out value based on second coin value, scales and reserves
 *
 * @param {Decimal} coinOut - decimal amount of first('from') token
 * @param {Decimal} scaleOut - decimal precision for the ('to')token in decimal places
 * @param {Decimal} scaleIn - precision for the ('from')token in decimal places
 * @param {Decimal} reserveOut - decimal amount of reserves for second('to') token
 * @param {Decimal} reserveIn - amount of reserves for first('from') token
 */
export declare function coin_out(coinIn: Decimal, scaleIn: Decimal, scaleOut: Decimal, reserveIn: Decimal, reserveOut: Decimal): Decimal;
/**
 * Calculates diff of reserves for opposite token
 *
 * @param {Decimal} x0 - Decimal amount of total reserves for target token
 * @param {Decimal} xy - Decimal value of inner liquid pool
 * @param {Decimal} y - Decimal amount of reserves for opposite token
 */
export declare function get_y(x0: Decimal, xy: Decimal, y: Decimal): Decimal;
/**
 * f function accepts a and b and returns(a^3 * b + b^3 * a)
 *
 * @param {Decimal} x0 - Decimal amount of total reserves for target token
 * @param {Decimal} y - Decimal amount of reserves for opposite token
 */
export declare function f(x0: Decimal, y: Decimal): Decimal;
/**
 * Calculates inner liquid pool value based on reserves and precisions of both tokens
 *
 * @param {Decimal} x_coin - amount of reserves for first('from') token
 * @param {Decimal} x_scale - precision for the ('from')token in decimal places
 * @param {Decimal} y_coin - amount of reserves for second('to') token
 * @param {Decimal} y_scale - precision for the ('to')token in decimal places
 */
export declare function lp_value(x_coin: Decimal, x_scale: Decimal, y_coin: Decimal, y_scale: Decimal): Decimal;
/** dStable function accepts a and b and returns (3a * b^2 + a^3)
 *
 *  @param {Decimal} x0 - Decimal amount of total reserves for target token
 *  @param {Decimal} y - Decimal amount of reserves for opposite token
 */
export declare function dStable(x0: Decimal, y: Decimal): Decimal;

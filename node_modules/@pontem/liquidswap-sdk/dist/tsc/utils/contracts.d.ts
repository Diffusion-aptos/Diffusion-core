import Decimal from 'decimal.js';
import { ICurves } from '../sdk';
import { CurveType } from "../types/aptos";
/**
 * Compare sorting between two coin types
 *
 * @param coin_x string with full address of coin
 * @param coin_y string with full address of coin
 * @returns boolean
 */
export declare function is_sorted(coin_x: string, coin_y: string): boolean;
export declare function composeType(address: string, generics: string[]): string;
export declare function composeType(address: string, struct: string, generics?: string[]): string;
export declare function composeType(address: string, module: string, struct: string, generics?: string[]): string;
/**
 * Calculate value with slippage.
 * @param {Decimal} slippage - slippage refers to the difference between the expected price of a trade
 * and the price at which the trade is executed.
 * @param {Decimal} value - value to calculate slippage
 */
export declare function withSlippage(slippage: Decimal, value: Decimal, isPlussed: boolean): number;
export declare function extractAddressFromType(type: string): string;
export declare function checkAptosType(type: any, options?: {
    leadingZero: boolean;
}): boolean;
/**
 * Get Script Modules Name for a Contract Version
 *
 * @throws Unknown contract version requested
 *
 * @param contract version number
 * @returns script with scripts module name value
 */
export declare function getScriptsFor(version: number): string;
/**
 * Compute full curve type for given contract version
 *
 * @param type short name of curve
 * @param contract version
 * @param curves curves from sdk
 * @returns curve full type
 *
 */
export declare function getCurve(type: CurveType, curves: ICurves, contract?: number): string;
